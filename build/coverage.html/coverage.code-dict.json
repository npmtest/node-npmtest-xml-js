{"/home/travis/build/npmtest/node-npmtest-xml-js/test.js":"/* istanbul instrument in package npmtest_xml_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xml-js/lib.npmtest_xml_js.js":"/* istanbul instrument in package npmtest_xml_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_xml_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_xml_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-xml-js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-xml-js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_xml_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_xml_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_xml_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_xml_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_xml_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_xml_js.__dirname + '/lib.npmtest_xml_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xml-js/node_modules/xml-js/lib/index.js":"/*jslint node:true */\r\n\r\nvar xml2js = require('./xml2js');\r\nvar xml2json = require('./xml2json');\r\nvar js2xml = require('./js2xml');\r\nvar json2xml = require('./json2xml');\r\n\r\nmodule.exports = {\r\n    xml2js: xml2js,\r\n    xml2json: xml2json,\r\n    js2xml: js2xml,\r\n    json2xml: json2xml\r\n};","/home/travis/build/npmtest/node-npmtest-xml-js/node_modules/xml-js/lib/xml2js.js":"var sax = require('sax');\r\nvar expat /*= require('node-expat');*/ = {on: function () {}, parse: function () {}};\r\nvar common = require('./common');\r\n\r\nvar options;\r\nvar pureJsParser = 1; //true;\r\nvar currentElement;\r\n\r\nfunction validateOptions (userOptions) {\r\n    options = common.copyOptions(userOptions);\r\n    common.ensureFlagExists('ignoreDeclaration', options);\r\n    common.ensureFlagExists('ignoreAttributes', options);\r\n    common.ensureFlagExists('ignoreText', options);\r\n    common.ensureFlagExists('ignoreComment', options);\r\n    common.ensureFlagExists('ignoreCdata', options);\r\n    common.ensureFlagExists('compact', options);\r\n    common.ensureFlagExists('alwaysChildren', options);\r\n    common.ensureFlagExists('addParent', options);\r\n    common.ensureFlagExists('trim', options);\r\n    common.ensureFlagExists('nativeType', options);\r\n    common.ensureFlagExists('sanitize', options);\r\n    common.ensureKeyExists('declaration', options);\r\n    common.ensureKeyExists('attributes', options);\r\n    common.ensureKeyExists('text', options);\r\n    common.ensureKeyExists('comment', options);\r\n    common.ensureKeyExists('cdata', options);\r\n    common.ensureKeyExists('type', options);\r\n    common.ensureKeyExists('name', options);\r\n    common.ensureKeyExists('elements', options);\r\n    common.ensureKeyExists('parent', options);\r\n    return options;\r\n}\r\n\r\nfunction nativeType (value) {\r\n    var nValue = Number(value);\r\n    if (!isNaN(nValue)) {\r\n        return nValue;\r\n    }\r\n    var bValue = value.toLowerCase();\r\n    if (bValue === 'true') {\r\n        return true;\r\n    } else if (bValue === 'false') {\r\n        return false;\r\n    }\r\n    return value;\r\n}\r\n\r\nfunction addField (type, value, options) {\r\n    if (options.compact) {\r\n        currentElement[options[type + 'Key']] = (currentElement[options[type + 'Key']] ? currentElement[options[type + 'Key']] + '\\n' : '') + value;\r\n    } else {\r\n        if (!currentElement[options.elementsKey]) {\r\n            currentElement[options.elementsKey] = [];\r\n        }\r\n        var element = {};\r\n        element[options.typeKey] = type;\r\n        element[options[type + 'Key']] = value;\r\n        if (options.addParent) {\r\n            element[options.parentKey] = currentElement;\r\n        }\r\n        currentElement[options.elementsKey].push(element);\r\n    }\r\n}\r\n\r\nfunction onDeclaration (declaration) {\r\n    if (options.ignoreDeclaration) {\r\n        return;\r\n    }\r\n    if (currentElement[options.declarationKey]) {\r\n        return;\r\n    }\r\n    currentElement[options.declarationKey] = {};\r\n    while (declaration.body) {\r\n        var attribute = declaration.body.match(/([\\w:-]+)\\s*=\\s*\"([^\"]*)\"|'([^']*)'|(\\w+)\\s*/);\r\n        if (!attribute) {\r\n            break;\r\n        }\r\n        if (!currentElement[options.declarationKey][options.attributesKey]) {\r\n            currentElement[options.declarationKey][options.attributesKey] = {};\r\n        }\r\n        currentElement[options.declarationKey][options.attributesKey][attribute[1]] = attribute[2];\r\n        declaration.body = declaration.body.slice(attribute[0].length); // advance the string\r\n    }\r\n    if (options.addParent) {\r\n        currentElement[options.declarationKey][options.parentKey] = currentElement;\r\n    }\r\n}\r\n\r\nfunction onStartElement (name, attributes) {\r\n    var key, element;\r\n    if (typeof name === 'object') {\r\n        attributes = name.attributes;\r\n        name = name.name;\r\n    }\r\n    if (options.trim && attributes) {\r\n        for (key in attributes) {\r\n            if (attributes.hasOwnProperty(key)) {\r\n                attributes[key] = attributes[key].trim();\r\n            }\r\n        }\r\n    }\r\n    if (options.compact) {\r\n        element = {};\r\n        if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {\r\n            element[options.attributesKey] = {};\r\n            for (key in attributes) {\r\n                if (attributes.hasOwnProperty(key)) {\r\n                    element[options.attributesKey][key] = attributes[key];\r\n                }\r\n            }\r\n        }\r\n        element[options.parentKey] = currentElement;\r\n        if (!(name in currentElement)) {\r\n            currentElement[name] = element;\r\n        } else {\r\n            if (!(currentElement[name] instanceof Array)) {\r\n                currentElement[name] = [currentElement[name]];\r\n            }\r\n            currentElement[name].push(element);\r\n        }\r\n        currentElement = element;\r\n    } else {\r\n        if (!currentElement[options.elementsKey]) {\r\n            currentElement[options.elementsKey] = [];\r\n        }\r\n        element = {};\r\n        element[options.typeKey] = 'element';\r\n        element[options.nameKey] = name;\r\n        if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {\r\n            element[options.attributesKey] = attributes;\r\n        }\r\n        element[options.parentKey] = currentElement;\r\n        if (options.alwaysChildren) {\r\n            element[options.elementsKey] = [];\r\n        }\r\n        currentElement[options.elementsKey].push(element);\r\n        currentElement = element;\r\n    }\r\n}\r\n\r\nfunction onText (text) {\r\n    //console.log('currentElement:', currentElement);\r\n    if (options.ignoreText) {\r\n        return;\r\n    }\r\n    if (!text.trim()) {\r\n        return;\r\n    }\r\n    if (options.trim) {\r\n        text = text.trim();\r\n    }\r\n    if (options.nativeType) {\r\n        text = nativeType(text);\r\n    }\r\n    if (options.sanitize) {\r\n        text = common.sanitize(text);\r\n    }\r\n    addField('text', text, options);\r\n}\r\n\r\nfunction onComment (comment) {\r\n    if (options.ignoreComment) {\r\n        return;\r\n    }\r\n    if (options.trim) {\r\n        comment = comment.trim();\r\n    }\r\n    if (options.sanitize) {\r\n        comment = common.sanitize(comment);\r\n    }\r\n    addField('comment', comment, options);\r\n}\r\n\r\nfunction onEndElement (name) {\r\n    var parentElement = currentElement[options.parentKey];\r\n    if (!options.addParent) {\r\n        delete currentElement[options.parentKey];\r\n    }\r\n    currentElement = parentElement;\r\n}\r\n\r\nfunction onCdata (cdata) {\r\n    if (options.ignoreCdata) {\r\n        return;\r\n    }\r\n    if (options.trim) {\r\n        cdata = cdata.trim();\r\n    }\r\n    addField('cdata', cdata, options);\r\n}\r\n\r\nfunction onError (error) {\r\n    error.note = error; //console.error(error);\r\n}\r\n\r\nmodule.exports = function (xml, userOptions) {\r\n    \r\n    var parser = pureJsParser ? sax.parser(true, {}) : parser = new expat.Parser('UTF-8');\r\n    var result = {};\r\n    currentElement = result;\r\n    \r\n    options = validateOptions(userOptions);\r\n    \r\n    if (pureJsParser) {\r\n        parser.onopentag = onStartElement;\r\n        parser.ontext = onText;\r\n        parser.oncomment = onComment;\r\n        parser.onclosetag = onEndElement;\r\n        parser.onerror = onError;\r\n        parser.oncdata = onCdata;\r\n        parser.onprocessinginstruction = onDeclaration;\r\n    } else {\r\n        parser.on('startElement', onStartElement);\r\n        parser.on('text', onText);\r\n        parser.on('comment', onComment);\r\n        parser.on('endElement', onEndElement);\r\n        parser.on('error', onError);\r\n        //parser.on('startCdata', onStartCdata);\r\n        //parser.on('endCdata', onEndCdata);\r\n        //parser.on('entityDecl', onEntityDecl);\r\n    }\r\n    \r\n    if (pureJsParser) {\r\n        parser.write(xml).close();\r\n    } else {\r\n        if (!parser.parse(xml)) {\r\n            throw new Error('XML parsing error: ' + parser.getError());\r\n        }\r\n    }\r\n    \r\n    if (result[options.elementsKey]) {\r\n        var temp = result[options.elementsKey];\r\n        delete result[options.elementsKey];\r\n        result[options.elementsKey] = temp;\r\n        delete result.text;\r\n    }\r\n    \r\n    return result;\r\n\r\n};","/home/travis/build/npmtest/node-npmtest-xml-js/node_modules/xml-js/lib/common.js":"/*jslint node:true */\r\n\r\nmodule.exports = {\r\n    sanitize: function (text) {\r\n        return text.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\");\r\n    },\r\n    copyOptions: function (options) {\r\n        var key, copy = {};\r\n        for (key in options) {\r\n            if (options.hasOwnProperty(key)) {\r\n                copy[key] = options[key];\r\n            }\r\n        }\r\n        return copy;\r\n    },\r\n    ensureFlagExists: function (item, options) {\r\n        if (!(item in options) || typeof options[item] !== 'boolean') {\r\n            options[item] = false;\r\n        }\r\n    },\r\n    ensureSpacesExists: function (options) {\r\n        if (!('spaces' in options) || (typeof options.spaces !== 'number' && typeof options.spaces !== 'string')) {\r\n            options.spaces = 0;\r\n        }\r\n    },\r\n    ensureKeyExists: function (key, options) {\r\n        if (!(key + 'Key' in options) || typeof options[key + 'Key'] !== 'string') {\r\n            options[key + 'Key'] = options.compact ? '_' + key : key;\r\n        }\r\n    },\r\n    getCommandLineHelp: function (command, requiredArgs, optionalArgs) {\r\n        var reqArgs = requiredArgs.reduce(function (res, arg) {return res + ' <' + arg.arg + '>';}, '');\r\n        var output = 'Usage: ' + command + reqArgs + ' [options]' + '\\n';\r\n        requiredArgs.forEach(function (argument) {\r\n            output += '  <' + argument.arg + '>' + Array(20 - argument.arg.length).join(' ') + argument.desc + '\\n';\r\n        });\r\n        output += '\\nOptions:' + '\\n';\r\n        optionalArgs.forEach(function (argument) {\r\n            output += '  --' + argument.arg + Array(20 - argument.arg.length).join(' ') + argument.desc + '\\n';\r\n        });\r\n        return output;\r\n    },\r\n    mapCommandLineArgs: function (requiredArgs, optionalArgs) {\r\n        var options = {}, r, o, a = 2;\r\n        for (r = 0; r < requiredArgs.length; r += 1) {\r\n            if (a < process.argv.length && process.argv[a].substr(0, 1) !== '-' && process.argv[a] !== 'JASMINE_CONFIG_PATH=./jasmine.json') {\r\n                options[requiredArgs[r].option] = process.argv[a++];\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        for (; a < process.argv.length; a += 1) {\r\n            for (o = 0; o < optionalArgs.length; o += 1) {\r\n                if (optionalArgs[o].alias === process.argv[a].slice(1) || optionalArgs[o].arg === process.argv[a].slice(2)) {\r\n                    break;\r\n                }\r\n            }\r\n            if (o < optionalArgs.length) {\r\n                switch (optionalArgs[o].type) {\r\n                    case 'file': case 'string': case 'number':\r\n                        if (a + 1 < process.argv.length) {\r\n                            a += 1;\r\n                            options[optionalArgs[o].option] = (optionalArgs[o].type === 'number' ? Number(process.argv[a]) : process.argv[a]);\r\n                        }\r\n                        break;\r\n                    case 'flag':\r\n                        options[optionalArgs[o].option] = true; break;\r\n                }\r\n            }\r\n        }\r\n        return options;\r\n    }\r\n};","/home/travis/build/npmtest/node-npmtest-xml-js/node_modules/xml-js/lib/xml2json.js":"var common = require('./common');\r\nvar xml2js = require('./xml2js');\r\n\r\nfunction validateOptions (userOptions) {\r\n    var options = common.copyOptions(userOptions);\r\n    common.ensureSpacesExists(options);\r\n    return options;\r\n}\r\n\r\nmodule.exports = function(xml, userOptions) {\r\n    'use strict';\r\n    var options, js, json, parentKey;\r\n    options = validateOptions(userOptions);\r\n    js = xml2js(xml, options);\r\n    parentKey = 'compact' in options && options.compact ? '_parent' : 'parent';\r\n    if ('addParent' in options && options.addParent) {\r\n        json = JSON.stringify(js, function (k, v) { return k === parentKey? '_' : v; }, options.spaces);\r\n    } else {\r\n        json = JSON.stringify(js, null, options.spaces);\r\n    }\r\n    return json.replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\r\n};","/home/travis/build/npmtest/node-npmtest-xml-js/node_modules/xml-js/lib/js2xml.js":"var common = require('./common');\r\n\r\nfunction validateOptions (userOptions) {\r\n    var options = common.copyOptions(userOptions);\r\n    common.ensureFlagExists('ignoreDeclaration', options);\r\n    common.ensureFlagExists('ignoreAttributes', options);\r\n    common.ensureFlagExists('ignoreText', options);\r\n    common.ensureFlagExists('ignoreComment', options);\r\n    common.ensureFlagExists('ignoreCdata', options);\r\n    common.ensureFlagExists('compact', options);\r\n    common.ensureFlagExists('fullTagEmptyElement', options);\r\n    common.ensureSpacesExists(options);\r\n    if (typeof options.spaces === 'number') {\r\n        options.spaces = Array(options.spaces + 1).join(' ');\r\n    }\r\n    common.ensureKeyExists('declaration', options);\r\n    common.ensureKeyExists('attributes', options);\r\n    common.ensureKeyExists('text', options);\r\n    common.ensureKeyExists('comment', options);\r\n    common.ensureKeyExists('cdata', options);\r\n    common.ensureKeyExists('type', options);\r\n    common.ensureKeyExists('name', options);\r\n    common.ensureKeyExists('elements', options);\r\n    return options;\r\n}\r\n\r\nfunction writeIndentation (options, depth, firstLine) {\r\n    return (!firstLine && options.spaces ? '\\n' : '') + Array(depth + 1).join(options.spaces);\r\n}\r\n\r\nfunction writeAttributes (attributes) {\r\n    var key, result = '';\r\n    for (key in attributes) {\r\n        if (attributes.hasOwnProperty(key)) {\r\n            result += ' ' + key + '=\"' + attributes[key] + '\"';\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction writeDeclaration (declaration, options) {\r\n    return '<?xml' + writeAttributes(declaration[options.attributesKey]) + '?>';\r\n}\r\n\r\nfunction writeComment (element, options) {\r\n    return options.ignoreComment ? '' : '<!--' + element[options.commentKey] + '-->';\r\n}\r\n\r\nfunction writeCdata (element, options) {\r\n    return options.ignoreCdata ? '' : '<![CDATA[' + element[options.cdataKey] + ']]>';\r\n}\r\n\r\nfunction writeText (element, options) {\r\n    return options.ignoreText ? '' : element[options.textKey].replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\");\r\n}\r\n\r\nfunction writeElement (element, options, depth) {\r\n    var xml = '';\r\n    xml += '<' + element.name;\r\n    if (element[options.attributesKey]) {\r\n        xml += writeAttributes(element[options.attributesKey]);\r\n    }\r\n    if (options.fullTagEmptyElement || (element[options.elementsKey] && element[options.elementsKey].length) || (element[options.attributesKey] && element[options.attributesKey]['xml:space'] === 'preserve')) {\r\n        xml += '>';\r\n        if (element[options.elementsKey] && element[options.elementsKey].length) {\r\n            xml += writeElements(element[options.elementsKey], options, depth + 1);\r\n        }\r\n        xml += (options.spaces && element[options.elementsKey] && element[options.elementsKey].length && (element[options.elementsKey].length > 1 || element[options.elementsKey][0].type !== 'text') ? '\\n' + Array(depth + 1).join(options.spaces) : '');\r\n        xml += '</' + element.name + '>';\r\n    } else {\r\n        xml += '/>';\r\n    }\r\n    return xml;\r\n}\r\n\r\nfunction writeElements (elements, options, depth, firstLine) {\r\n    var indent = writeIndentation(options, depth, firstLine);\r\n    return elements.reduce(function (xml, element) {\r\n        switch (element.type) {\r\n            case 'element': return xml + indent + writeElement(element, options, depth);\r\n            case 'comment': return xml + indent + writeComment(element, options);\r\n            case 'cdata': return xml + indent + writeCdata(element, options);\r\n            case 'text': return xml + writeText(element, options);\r\n        }\r\n    }, '');\r\n}\r\n\r\nfunction hasContent (element, options, skipText) {\r\n    var key;\r\n    for (key in element) {\r\n        if (element.hasOwnProperty(key)) {\r\n            switch (key) {\r\n                case options.textKey:\r\n                    if (!skipText) {\r\n                        return true;\r\n                    }\r\n                    break; // skip to next key\r\n                case options.parentKey:\r\n                case options.attributesKey:\r\n                    break; // skip to next key\r\n                case options.cdataKey:\r\n                case options.commentKey:\r\n                case options.declarationKey:\r\n                    return true;\r\n                default:\r\n                    return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction writeElementCompact (element, name, options, depth, indent) {\r\n    var xml = '';\r\n    if (name) {\r\n        xml += '<' + name;\r\n        if (element[options.attributesKey]) {\r\n            xml += writeAttributes(element[options.attributesKey]);\r\n        }\r\n        if (options.fullTagEmptyElement || hasContent(element, options) || element[options.attributesKey] && element[options.attributesKey]['xml:space'] === 'preserve') {\r\n            xml += '>';\r\n        } else {\r\n            xml += '/>';\r\n            return xml;\r\n        }\r\n    }\r\n    xml += writeElementsCompact(element, options, depth + 1, false);\r\n    if (name) {\r\n        xml += (indent ? writeIndentation(options, depth, false) : '') + '</' + name + '>';\r\n    }\r\n    return xml;\r\n}\r\n\r\nfunction writeElementsCompact (element, options, depth, firstLine) {\r\n    var key, xml = '';\r\n    for (key in element) {\r\n        if (element.hasOwnProperty(key)) {\r\n            switch (key) {\r\n                case options.declarationKey: xml += writeDeclaration(element[options.declarationKey], options); break;\r\n                case options.attributesKey: case options.parentKey: break; // skip\r\n                case options.textKey: xml += writeText(element, options); break;\r\n                case options.cdataKey: xml += writeIndentation(options, depth, firstLine) + writeCdata(element, options); break;\r\n                case options.commentKey: xml += writeIndentation(options, depth, firstLine) + writeComment(element, options); break;\r\n                default:\r\n                    if (element[key] instanceof Array) {\r\n                        element[key].forEach(function (el) {\r\n                            xml += writeIndentation(options, depth, firstLine) + writeElementCompact(el, key, options, depth, hasContent(el, options, true));\r\n                        });\r\n                    } else {\r\n                        xml += writeIndentation(options, depth, firstLine) + writeElementCompact(element[key], key, options, depth, hasContent(element[key], options, true));\r\n                    }\r\n            }\r\n            firstLine = firstLine && !xml;\r\n        }\r\n    }\r\n    return xml;\r\n}\r\n\r\nmodule.exports = function (js, options) {\r\n    'use strict';\r\n    options = validateOptions(options);\r\n    var xml = '';\r\n    if (options.compact) {\r\n        xml = writeElementsCompact(js, options, 0, true);\r\n    } else {\r\n        if (js[options.declarationKey]) {\r\n            xml += writeDeclaration(js[options.declarationKey], options);\r\n        }\r\n        if (js[options.elementsKey] && js[options.elementsKey].length) {\r\n            xml += writeElements(js[options.elementsKey], options, 0, !xml);\r\n        }\r\n    }\r\n    return xml;\r\n};","/home/travis/build/npmtest/node-npmtest-xml-js/node_modules/xml-js/lib/json2xml.js":"var js2xml = require('./js2xml.js');\r\n\r\nmodule.exports = function (json, options) {\r\n    'use strict';\r\n    if (json instanceof Buffer) {\r\n        json = json.toString();\r\n    }\r\n    var js = null;\r\n    if (typeof (json) === 'string') {\r\n        try {\r\n            js = JSON.parse(json);\r\n        } catch (e) {\r\n            throw new Error(\"The JSON structure is invalid\");\r\n        }\r\n    } else {\r\n        js = json;\r\n    }\r\n    return js2xml(js, options);\r\n};","/home/travis/build/npmtest/node-npmtest-xml-js/node_modules/xml-js/bin/cli.js":"#!/usr/bin/env node\r\n/*jslint node:true*/\r\n\r\nvar fs = require('fs');\r\nvar package = require('../package.json');\r\nvar common = require('../lib/common');\r\nvar xml2json = require('../lib/xml2json');\r\nvar json2xml = require('../lib/json2xml');\r\n\r\nvar output = '';\r\nvar stream = '';\r\nvar options = {};\r\nvar requiredArgs = [\r\n    {arg: 'src', type: 'file', option: 'src', desc: 'Input file that need to be converted.'}\r\n];\r\nvar optionalArgs = [\r\n    {arg: 'help', alias: 'h', type: 'flag', option: 'help', desc: 'Display this help content.'},\r\n    {arg: 'version', alias: 'v', type: 'flag', option: 'version', desc: 'Display version number of this module.'},\r\n    {arg: 'out', type: 'file', option: 'out', desc: 'Output file where the converted result should be written.'},\r\n    {arg: 'to-json', type: 'flag', option:'toJason', desc: 'Convert.'},\r\n    {arg: 'compact', type: 'flag', option:'compact', desc: 'Compact JSON form (see www.npmjs.com/package/xml-js).'},\r\n    {arg: 'spaces', type: 'number', option:'spaces', desc: 'Specifies amount of space indentation in the output.'},\r\n    {arg: 'trim', type: 'flag', option:'trim', desc: 'Whitespaces surrounding texts will be trimmed.'},\r\n    {arg: 'sanitize', type: 'flag', option:'sanitize', desc: 'Special xml characters will be replaced with entity codes.'},\r\n    {arg: 'native-type', type: 'flag', option:'nativeType', desc: 'Numbers and boolean will be converted (coreced) to native type instead of text.'},\r\n    {arg: 'always-children', type: 'flag', option:'alwaysChildren', desc: 'Every element will always contain sub-elements (applicable if --compact is not set).'},\r\n    {arg: 'full-tag', type: 'flag', option:'fullTagEmptyElement', desc: 'XML elements will always be in <a></a> form.'},\r\n    {arg: 'no-decl', type: 'flag', option:'ignoreDeclaration', desc: 'Declaration instruction <?xml ..?> will be ignored.'},\r\n    {arg: 'no-attr', type: 'flag', option:'ignoreAttributes', desc: 'Attributes of elements will be ignored.'},\r\n    {arg: 'no-text', type: 'flag', option:'ignoreText', desc: 'Texts of elements will be ignored.'},\r\n    {arg: 'no-cdata', type: 'flag', option:'ignoreCdata', desc: 'Cdata of elements will be ignored.'},\r\n    {arg: 'no-comment', type: 'flag', option:'ignoreComment', desc: 'Comments of elements will be ignored.'},\r\n    {arg: 'text-key', type: 'string', option:'textKey', desc: 'To change the default \\'text\\' key.'},\r\n    {arg: 'cdata-key', type: 'string', option:'cdataKey', desc: 'To change the default \\'cdata\\' key.'},\r\n    {arg: 'comment-key', type: 'string', option:'commentKey', desc: 'To change the default \\'comment\\' key.'},\r\n    {arg: 'attributes-key', type: 'string', option:'attributesKey', desc: 'To change the default \\'attributes\\' key.'},\r\n    {arg: 'declaration-key', type: 'string', option:'declarationKey', desc: 'To change the default \\'declaration\\' key.'},\r\n    {arg: 'type-key', type: 'string', option:'typeKey', desc: 'To change the default \\'type\\' key (applicable if --compact is not set).'},\r\n    {arg: 'name-key', type: 'string', option:'nameKey', desc: 'To change the default \\'name\\' key (applicable if --compact is not set).'},\r\n    {arg: 'elements-key', type: 'string', option:'elementsKey', desc: 'To change the default \\'elements\\' key (applicable if --compact is not set).'}\r\n];\r\n\r\nprocess.stdin.setEncoding('utf8');\r\nprocess.stdin.on('readable', function () {\r\n    var chunk = process.stdin.read();\r\n    if (chunk !== null) {\r\n\t    stream += chunk;\r\n    }\r\n});\r\nprocess.stdin.on('end', function () {\r\n\tprocess.stdout.write(xml2json(stream, {}) + '\\n');\r\n});\r\n\r\noptions = common.mapCommandLineArgs(requiredArgs, optionalArgs);\r\n\r\n\r\nif (options.version) {\r\n\tconsole.log(package.version);\r\n\tprocess.exit(0);\r\n} else if (options.help || process.argv.length <= 2 + requiredArgs.length - 1) {\r\n    console.log(common.getCommandLineHelp('xml-js', requiredArgs, optionalArgs));\r\n    process.exit(process.argv.length <= 2 ? 1 : 0);\r\n} else if ('src' in options) {\r\n    //console.log('---------------' + fs.statSync(options.src).isFile());\r\n    if (fs.statSync(options.src).isFile()) {\r\n        if (options.src.split('.').pop() === 'xml') {\r\n            output = xml2json(fs.readFileSync(options.src, 'utf8'), options);\r\n        } else if (options.src.split('.').pop() === 'json') {\r\n            output = json2xml(fs.readFileSync(options.src, 'utf8'), options);\r\n        }\r\n        if (options.out) {\r\n            fs.writeFileSync(options.out, output, 'utf8');\r\n        } else {\r\n            console.log(output);\r\n        }\r\n        process.exit(0);\r\n    }\r\n} else {\r\n\tprocess.exit(1);\r\n}    "}